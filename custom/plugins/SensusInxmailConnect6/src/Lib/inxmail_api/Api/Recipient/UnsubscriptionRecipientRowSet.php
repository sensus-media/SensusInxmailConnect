<?php

/**
 * @package Inxmail
 * @subpackage Recipient
 */
/**
 * An <i>Inx_Api_Recipient_UnsubscriptionRecipientRowSet</i> is best explained as a table of data representing a 
 * set of recipients, which is usually generated by executing a selection that queries unsubscribed recipients 
 * from the recipient context.
 * <P>
 * An <i>UnsubscriptionRecipientRowSet</i> object maintains a cursor pointing to its current row of data.
 * Initially the cursor is positioned before the first row. 
 * The <i>next()</i> method moves the cursor to the next row (recipient), and because it returns <i>false</i> when 
 * there are no more rows in the <i>UnsubscriptionRecipientRowSet</i>, it can be used in a <i>while</i> loop to 
 * iterate through the result set.
 * <p>
 * Be sure to call <i>next()</i> before the first retrieval statement on the row set. 
 * As stated above, initially the cursor is before the first row, thus no data can be retrieved from the row set 
 * before calling <i>next()</i>. 
 * Doing so will trigger an <i>Inx_Api_DataException</i>.
 * <P>
 * The <i>Inx_Api_Recipient_UnsubscriptionRecipientRowSet</i> interface provides <i>getter</i> methods (<i>getString</i>, 
 * <i>getInteger</i>, and so on) for retrieving attribute values from the current row. 
 * Values can be retrieved using the attribute object.
 * <p>
 * The following snippet shows how to retrieve the email address of all recipients in the row set (all recipients who
 * were unsubscribed from the specified list), thus also illustrating how to iterate over an
 * <i>UnsubscriptionRecipientRowSet</i>:
 * 
 * <pre>
 * $oRecipientContext = $oSession->createRecipientContext();
 * $oAttribute = $oRecipientContext->getMetaData()->getEmailAttribute();
 * $oListContext = $oSession->getListContextManager()->findByName( &quot;Desired list&quot; );
 * $oUnsubscriptionRecipientRowSet = $oRecipientContext->selectUnsubscriber( $oListContext );
 * 
 * while( $oUnsubscriptionRecipientRowSet->next() )
 * {
 * 	echo $oUnsubscriptionRecipientRowSet->getString( $oAttribute ).&quot;&#60;br&#62;&quot;;
 * }
 * 
 * $oUnsubscriptionRecipientRowSet->close();
 * </pre>
 * <P>
 * An <i>Inx_Api_Recipient_UnsubscriptionRecipientRowSet</i> offers no update methods. 
 * It's primary purpose is to resubscribe recipients, who were previously unsubscribed from a list. 
 * To update recipient data, either use an <i>Inx_Api_Recipient_RecipientRowSet</i> or the <I>Inx_Api_Recipient_BatchChannel</i>.
 * <p>
 * For resubscription of the recipient use the <i>resubscribe()</i> method. 
 * It offers a date parameter for setting a new subscription date. 
 * If you want to use the original subscription date set the parameter to <i>null</i>.
 * The following snippet shows how to resubscribe the first ten recipients in the row set using the current datetime 
 * as subscription date:
 * 
 * <pre>
 * $oRecipientContext = $oSession->createRecipientContext();
 * $oListContext = $oSession->getListContextManager()->findByName( &quot;Desired list&quot; );
 * $oUnsubscriptionRecipientRowSet = $oRecipientContext->selectUnsubscriber( $oListContext );
 * 
 * $oUnsubscriptionRecipientRowSet->setResubscribe( date('c'), new Inx_Api_IndexSelection( 0, 9 ) );
 * $oUnsubscriptionRecipientRowSet->close();
 * </pre>
 * 
 * Note: The <i>setResubscribe()</i> methods do not require a call to <i>commitRowUpdate()</i> to be reflected on the server. 
 * However, the <i>resubscribe()</i> method does.
 * <p>
 * <b>Note:</b> An <i>Inx_Api_Recipient_UnsubscriptionRecipientRowSet</i> object <b>must</b> be closed once
 * it is not needed anymore to prevent memory leaks and other potentially harmful side effects.
 * <p>
 * For more information about recipients and the operations that can be performed on them, see the
 * <i>Inx_Api_Recipient_RecipientContext</i> documentation.
 * 
 * @see Inx_Api_Recipient_RecipientContext
 * @see Inx_Api_Recipient_RecipientRowSet
 * @since   API 1.6
 * @version $Revision: 9553 $ $Date: 2008-01-04 11:28:41 +0200 (Pn, 04 Sau 2008) $ $Author: vladas $
 * @package Inxmail
 * @subpackage Recipient
 */
interface Inx_Api_Recipient_UnsubscriptionRecipientRowSet extends Inx_Api_Recipient_ReadOnlyRecipientRowSet, 
    Inx_Api_ManipulationRowSet
{    
    /**
     * Resubscribes the recipient. The resubscription will be processed after calling <i>commitRowUpdate()</i>.
	 * 
	 * @param subscriptionDate the subscription date. If <i>null</i> the original subscription date will be used.
	 * @since API 1.6.0
	 */
	public function resubscribe( $subscriptionDate );


	/**
	 * Resubscribes the recipients in the specified selection. 
	 * If the selection is ommitted, all recipients in this row set will be resubscribed.
	 * 
	 * @param subscriptionDate the subscription date. If <i>null</i> the original subscription date will be used.
	 * @param selection the selected rows. May be ommitted.
	 * @return <i>true</i>, if the recipients were resubscribed, <i>false</i> otherwise.
	 */
	public function setResubscribe( $subscriptionDate, Inx_Api_IndexSelection $oSelection=null );  
  
    /**
     * Retrieves the recipient id in the current row of this <i>Inx_Api_Recipient_UnsubscriptionRecipientRowSet</i> object.
     *
     * @return int the recipient id in the current row.
     * @throws Inx_Api_DataException if the selected recipient is deleted.
     */
    public function getId();  
        
        /**
	 * Returns the point in time when the current recipient was unsubscribed from the selected list.
	 * 
	 * @return string the point in time when the current recipient was unsubscribed from the selected list as ISO 8601 
         *         formatted datetime string. May be <i>null</i> if the subscription attribute was not found.
	 * @exception Inx_Api_DataException if the recipient was deleted or no recipient is selected (e.g. you forgot to call
	 *         <i>next()</i>).
	 */
	public function getUnsubscriptionDate();
}
