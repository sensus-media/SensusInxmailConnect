<?php

/**
 * @package Inxmail
 * @subpackage Testprofiles
 */
/**
 * An <i>Inx_Api_Testprofiles_TestRecipientRowSet</i> is best explained as a table of data representing a set of test 
 * recipients, which is usually generated by executing a selection that queries the test recipient context.
 * <p>
 * Test recipients (or test profiles) can be used to create a personalized preview of a mailing. 
 * A test recipient object holds the following information:
 * <p>
 * <ul>
 * <li><i>The unique identifier (immutable)</i>: Uniquely identifies a test recipient.
 * <li><i>The name / profile description</i>: Describes the test recipient. While this attribute is not required to be
 * unique, still it is mandatory.
 * <li><i>The email address</i>: Mandatory attribute which can be set using <i>updateString($oAttribute, $sValue)</i>.
 * <li><i>Some other recipient attribute values</i>: Probably a test recipients contains other recipient attribute
 * values which can be used to personalize a mailing.
 * </ul>
 * <P>
 * A <i>TestRecipientRowSet</i> object maintains a cursor pointing to its current row of data. 
 * Initially the cursor is positioned before the first row. 
 * The <i>next()</i> method moves the cursor to the next row (test recipient), and because it returns <i>false</i> 
 * when there are no more rows in the <i>TestRecipientRowSet</i> object, it can be used in a <i>while</i> loop to 
 * iterate through the result set.
 * <p>
 * Be sure to call <i>next()</i> before the first retrieval statement on the row set. 
 * As stated above, initially the cursor is before the first row, thus no data can be retrieved from the row set before 
 * calling <i>next()</i>. 
 * Doing so will trigger an <i>Inx_Api_DataException</i>.
 * <P>
 * The <i>TestRecipientRowSet</i> interface provides <i>getter</i> methods (<i>getString</i>, <i>getInteger</i>, and so on) 
 * for retrieving attribute values from the current row. 
 * Values can be retrieved using the attribute object.
 * <p>
 * The following snippet shows how to retrieve the email address of all test recipients in the row set, thus also
 * illustrating how to iterate over a <i>TestRecipientRowSet</i>:
 * 
 * <pre>
 * $oTestRecipientContext = $oSession->createTestRecipientContext();
 * $oAttribute_email = $oSession->createRecipientContext()->getMetaData()->getEmailAttribute();
 * $oListContext = $oSession->getListContextManager()->findByName( &quot;Desired List&quot; );
 * $oTestRecipientRowSet = $oTestRecipientContext->select( $oListContext );
 * 
 * while( $oTestRecipientRowSet->next() )
 * {
 * 	echo $oTestRecipientRowSet->getString( $oAttribute_email ).&quot;&#60;br&#62;&quot;;
 * }
 * 
 * $oTestRecipientRowSet->close();
 * </pre>
 * <P>
 * The update methods may be used in two ways:
 * <ol>
 * <LI>To update a column value in the current row. 
 * In a <i>TestRecipientRowSet</i> object, the cursor can be moved backwards and forwards, to an absolute position. 
 * The following snippet shows how to update the <i>Lastname</i> attribute in the fifth row of the 
 * <i>TestRecipientRowSet</i> object <i>trrs</i> and then uses the method <i>commitRowUpdate</i> to 
 * commit the changed data from which <i>trrs</i> was derived:
 * 
 * <PRE>
 * $oAttribute = $oRecipientMetaData->getUserAttribute( &quot;Lastname&quot; );
 * $oTestRecipientRowSet->setRow( 4 ); // moves the cursor to the fifth row of trrs
 * // updates the 'Lastname' attribute of row 4 (fifth row) to be 'Smith'
 * $oTestRecipientRowSet->updateString( $oAttribute, &quot;Smith&quot; );
 * $oTestRecipientRowSet->commitRowUpdate(); // updates the row in the data source
 * </PRE>
 * <LI>To insert attribute values into the insert row. 
 * The <i>TestRecipientRowSet</i> object has a special row associated with it that serves as a staging area for 
 * building a test recipient to be inserted. 
 * The following snippet shows how to move the cursor to the insert row and insert the new test recipient 
 * data into <i>trrs</i> and into the data source table using the method <i>commitRowUpdate</i>:
 * 
 * <PRE>
 * $oAttribute_email = $oRecipientMetaData->getEmailAttribute();
 * $oAttribute_attr = $oRecipientMetaData->getUserAttribute( &quot;Lastname&quot; );
 * $oTestRecipientRowSet->moveToInsertRow(); // moves cursor to the insert row
 * // email attribute of the insert row to be smith@gmx.com - mandatory
 * $oTestRecipientRowSet->updateString( $oAttribute_email, &quot;smith@gmx.com&quot; );
 * // update profile description - mandatory
 * $oTestRecipientRowSet->updateName( &quot;Smith&quot; );
 * $oTestRecipientRowSet->updateString( $oAttribute_attr, &quot;Smith&quot; );
 * $oTestRecipientRowSet->commitRowUpdate(); // insert the row in the data source
 * </PRE>
 * 
 * The code above will create a new recipient with the address smith@gmx.com, the name / 
 * profile description Smith and the last name Smith. 
 * Usually creating new recipients is accomplished using an empty <i>TestRecipientRowSet</i>.
 * Such a row set can be obtained using the <i>Inx_Api_Testprofile_TestRecipientContext::createRowSet($oListContext)</i> method. 
 * However, the returned row set can only be used to create recipients, as there are no recipients in the row set.
 * </ol>
 * <p>
 * All row changes except for the <i>remove()</i> method require a call of <i>commitRowUpdate()</i> to be reflected on the server. 
 * Any uncommitted changes will be lost once the <i>TestRecipientRowSet</i> is closed.
 * However, calling <i>commitRowUpdate()</i> on deleted rows will trigger an <i>Inx_Api_DataException</i>, as the recipient 
 * in the current row no longer exists.
 * <p>
 * Note: To safely abandon all changes of the current row, use the <i>rollbackRowUpdate()</i> method. 
 * This will prevent any changes to the current row from being committed through <i>commitRowUpdate()</i>. 
 * Be aware that <i>rollbackRowUpdate</i> will only undo <i>uncommitted</i> changes to the current row. 
 * So, once you called <i>commitRowUpdate()</i> there is "no way back".
 * <p>
 * <b>Note:</b> An <i>Inx_Api_Testprofiles_TestRecipientRowSet</i> object <b>must</b> be closed once it is not
 * needed anymore to prevent memory leaks and other potentially harmful side effects.
 * <p>
 * For more information about the retrieval of test recipients, see the <i>Inx_Api_Testprofile_TestRecipientContext</i> documentation.
 * 
 * @see Inx_Api_Testprofiles_TestRecipientContext 
 * @since API 1.6.0
 * @version $Revision: 2934 $ $Date: 2005-07-04 17:00:09 +0200 (Mo, 04 Jul 2005) $ $Author: bgn $
 */
interface Inx_Api_Testprofiles_TestRecipientRowSet extends Inx_Api_Recipient_RecipientManipulationRowSet, 
        Inx_Api_InsertionRowSet
{
	/**
	 * Retrieves the test recipient id of the current row of this <i>TestRecipientRowSet</i> object.
	 * 
	 * @return int the id of the current test recipient.
	 * @throws Inx_Api_DataException if the test recipient was deleted or no test recipient is selected (e.g. you 
	 * 				forgot to call <i>next()</i>).
	 */
	public function getId();


	/**
	 * Retrieves the name/profile description of the test recipient in the current row of this
	 * <i>TestRecipientRowSet</i> object.
	 * 
	 * @return string the name of the test recipient.
	 * @throws Inx_Api_DataException if the test recipient was deleted or no test recipient is selected (e.g. you 
	 * 				forgot to call <i>next()</i>).
	 */
	public function getName();


	/**
	 * Updates the name/profile description of the test recipient in the current row of this
	 * <i>TestRecipientRowSet</i> object.
	 * 
	 * @param string $sName the name of the test recipient profile.
	 * @throws Inx_Api_DataException if the test recipient was deleted or no test recipient is selected (e.g. you 
	 * 				forgot to call <i>next()</i>).
	 */
	public function updateName( $sName );
}
